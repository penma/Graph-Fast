#!/usr/bin/perl
use strict;
use warnings;

use lib 'lib';
use Graph::Directed;
use Graph::Fastgraph;
use Time::HiRes qw(time);

sub countvertices {
	my $g = shift;
	return $g->countvertices() if (ref($g) eq "Graph::Fastgraph");
	return scalar($g->vertices);
}
sub countedges {
	my $g = shift;
	return $g->countedges() if (ref($g) eq "Graph::Fastgraph");
	return scalar($g->edges);
}

sub td_start { $main::x____time = time(); }
sub td_end   { return time() - $main::x____time; }

sub test_module {
	my ($mod, $nodes, $xedges, $xedges_c, $randlen) = @_;
	my $g = $mod->new;

	my %times;

	print STDERR sprintf("Testing %s\n", $mod);

	print STDERR sprintf("Creating graph: creating %d nodes with edges to a central node ", $nodes);
	td_start;
	foreach (1..$nodes) {
		print STDERR sprintf("%5.1f%%\b\b\b\b\b\b", 100 * $_ / $nodes) unless ($_ % int($nodes / 10));
		$g->add_weighted_edge($_, "center", 9_999_999);
		$g->add_weighted_edge("center", $_, 9_999_999);
	}
	$times{create1} = td_end;
	print STDERR "\n";

	print STDERR sprintf("Creating graph: creating %d edge chains of %d edges each (length: random 1..%d) ", $xedges, $xedges_c, $randlen);
	srand(4789184); # seed with the same value for a fair comparison
	td_start;
	for (1..$xedges) {
		print STDERR sprintf("%5.1f%%\b\b\b\b\b\b", 100 * $_ / $xedges) unless ($_ % int($xedges / 20));
		my @n;
		push(@n, int(rand($nodes) + 1)) foreach (1..$xedges_c);
		for (my $i = 0; $i < scalar(@n) - 1; $i++) {
			$g->add_weighted_edge($n[$i], $n[$i + 1], int(rand($randlen) + 1));
		}
	}
	$times{create2} = td_end;
	print STDERR "\n";

	print STDERR sprintf("     Graph has %d vertices, %d edges\n", countvertices($g), countedges($g));

	print STDERR "Running Dijkstra's algorithm (might take some time)...";
	td_start;
	my @way = $g->SP_Dijkstra(int(rand($nodes) + 1), int(rand($nodes) + 1));
	$times{dijkstra} = td_end;
	# different ways might be normal here. if at least the count of nodes in
	# it is the same, it's likely that the paths generated by two different
	# modules are actually the same length.
	print STDERR "\n     result: " . join(" - ", @way) . "\n";

	print STDERR "\n";

	# print the results
	print "Test results for $mod:\n";
	printf("%40s: %7.3fs (%7.3fs+%7.3fs)\n", "Graph creation",
		$times{create1} + $times{create2},
		$times{create1}, $times{create2});
	printf("%40s: %7.3fs\n", "Dijkstra's algorithm",
		$times{dijkstra});
	
	return %times;
}

$| = 1;

foreach (
[1000, 2000, 5, 100],
[1000, 20000, 5, 10],
[10000, 20000, 5, 10000000],
) {
	test_module("Graph::Directed", @{$_});
	test_module("Graph::Fastgraph", @{$_});
	print "\n\n";
}


